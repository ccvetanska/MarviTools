import io
from typing import Tuple
import streamlit as st
from PIL import Image, ImageOps, ImageEnhance
import os

st.set_page_config(page_title="Image Resizer + Watermark", page_icon="üñºÔ∏è", layout="centered")

st.title("üñºÔ∏è Image Resizer (500√ó500) + Watermark")
st.caption("–ö–∞—á–∏ –æ—Å–Ω–æ–≤–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ watermark. –†–µ–∑—É–ª—Ç–∞—Ç—ä—Ç –µ 500√ó500 —Å –∫–æ–Ω—Ç—Ä–æ–ª –≤—ä—Ä—Ö—É –ø–æ–∑–∏—Ü–∏—è, –º–∞—â–∞–± –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç.")

# --- SIDEBAR OPTIONS ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
bg_mode = st.sidebar.selectbox("–§–æ–Ω –Ω–∞ 500√ó500", ["–ë—è–ª", "–ß–µ—Ä–µ–Ω", "–ü—Ä–æ–∑—Ä–∞—á–µ–Ω (—Å–∞–º–æ PNG)"])
wm_scale_pct = st.sidebar.slider("–†–∞–∑–º–µ—Ä –Ω–∞ watermark (% –æ—Ç —à–∏—Ä–∏–Ω–∞—Ç–∞)", 5, 80, 30, 1)
wm_opacity = st.sidebar.slider("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç –Ω–∞ watermark", 0.0, 1.0, 0.5, 0.05)
wm_margin = st.sidebar.number_input("–û—Ç—Å—Ç—ä–ø –æ—Ç —Ä—ä–±–æ–≤–µ—Ç–µ (px)", min_value=0, max_value=200, value=12, step=1)
wm_position_label = st.sidebar.selectbox(
    "–ü–æ–∑–∏—Ü–∏—è –Ω–∞ watermark",
    ["–¥–æ–ª—É-–ª—è–≤–æ", "–¥–æ–ª—É-—Ü–µ–Ω—Ç—ä—Ä", "–¥–æ–ª—É-–¥—è—Å–Ω–æ",
     "—Å—Ä–µ–¥–∞-–ª—è–≤–æ", "—Ü–µ–Ω—Ç—ä—Ä", "—Å—Ä–µ–¥–∞-–¥—è—Å–Ω–æ",
     "–≥–æ—Ä–µ-–ª—è–≤–æ", "–≥–æ—Ä–µ-—Ü–µ–Ω—Ç—ä—Ä", "–≥–æ—Ä–µ-–¥—è—Å–Ω–æ"]
)
out_format = st.sidebar.selectbox("–§–æ—Ä–º–∞—Ç –Ω–∞ –∏–∑—Ö–æ–¥–∞", ["PNG", "JPEG"])

# --- FILE UPLOADS ---
col1, col2 = st.columns(2)
with col1:
    main_file = st.file_uploader("–ö–∞—á–∏ –æ—Å–Ω–æ–≤–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["png", "jpg", "jpeg", "webp"])
with col2:
    wm_file = st.file_uploader("–ö–∞—á–∏ watermark –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["png", "jpg", "jpeg", "webp"])

# --- DEFAULT WATERMARK ---
default_wm_path = "rsrc/marvi-logo.png"
if wm_file is not None:
    wm_img = Image.open(wm_file)
else:
    if os.path.exists(default_wm_path):
        wm_img = Image.open(default_wm_path)
        st.sidebar.info("–ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ default watermark: marvi-logo.png")
    else:
        wm_img = None
        st.sidebar.warning("–ù–µ –µ –∫–∞—á–µ–Ω watermark –∏ –ª–∏–ø—Å–≤–∞ default –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

def pos_to_anchor(label: str) -> Tuple[str, str]:
    vmap = {
        "–≥–æ—Ä–µ": "top", "—Å—Ä–µ–¥–∞": "middle", "—Ü–µ–Ω—Ç—ä—Ä": "middle", "–¥–æ–ª—É": "bottom"
    }
    hmap = {
        "–ª—è–≤–æ": "left", "—Ü–µ–Ω—Ç—ä—Ä": "center", "–¥—è—Å–Ω–æ": "right"
    }
    parts = label.split("-")
    if len(parts) == 2:
        v, h = parts
    else:
        return ("middle", "center")
    return (vmap.get(v, "middle"), hmap.get(h, "center"))

def alpha_apply(img: Image.Image, opacity: float) -> Image.Image:
    """–ü—Ä–∏–ª–æ–∂–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç –∫—ä–º RGBA –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    if img.mode != "RGBA":
        img = img.convert("RGBA")
    r, g, b, a = img.split()

    a = a.point(lambda p: int(p * opacity))
    return Image.merge("RGBA", (r, g, b, a))

def compute_xy(anchor_v: str, anchor_h: str, base_w: int, base_h: int, wm_w: int, wm_h: int, margin: int) -> Tuple[int, int]:
    if anchor_h == "left":
        x = margin
    elif anchor_h == "center":
        x = (base_w - wm_w) // 2
    else:  
        x = base_w - wm_w - margin

    if anchor_v == "top":
        y = margin
    elif anchor_v == "middle":
        y = (base_h - wm_h) // 2
    else:  # bottom
        y = base_h - wm_h - margin
    return x, y

def resize_to_square(img: Image.Image, size: int = 500, bg: str = "white", transparent: bool = False) -> Image.Image:
    """–ü—Ä–µ–æ—Ä–∞–∑–º–µ—Ä—è–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞ —Å–µ –ø–æ–±–µ—Ä–µ –≤ size√ósize —Å—ä—Å –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏—Ç–µ –∏ –∑–∞–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ —Ñ–æ–Ω."""
    if transparent:
        canvas = Image.new("RGBA", (size, size), (0, 0, 0, 0))
    else:
        # bg –µ hex –∏–º–µ –∏–ª–∏ ('white'/'black')
        canvas = Image.new("RGB", (size, size), bg)
    # –ü–æ–±–∏—Ä–∞–Ω–µ
    mode_before = img.mode
    img = ImageOps.contain(img, (size, size), method=Image.Resampling.LANCZOS)
    # –¶–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–µ
    x = (size - img.width) // 2
    y = (size - img.height) // 2
    if canvas.mode == "RGBA":
        if img.mode != "RGBA":
            img = img.convert("RGBA")
    else:
        if img.mode not in ("RGB", "L"):
            img = img.convert("RGB")
    canvas.paste(img, (x, y), img if img.mode == "RGBA" and canvas.mode == "RGBA" else None)
    return canvas

def place_watermark(base: Image.Image, wm: Image.Image, scale_pct: int, opacity: float, pos_label: str, margin: int) -> Image.Image:
    """–ü–æ—Å—Ç–∞–≤—è watermark –≤—ä—Ä—Ö—É base (–∏ –¥–≤–µ—Ç–µ –≤ 500√ó500), —Å –º–∞—â–∞–±/–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç/–ø–æ–∑–∏—Ü–∏—è."""
    base = base.copy()
    if base.mode != "RGBA":
        base = base.convert("RGBA")
    wm = wm.convert("RGBA")

    # resize watermark depending on scale_pct
    target_w = max(1, int(base.width * (scale_pct / 100.0)))
    scale = target_w / wm.width
    target_h = max(1, int(wm.height * scale))
    wm_resized = wm.resize((target_w, target_h), Image.Resampling.LANCZOS)

    # Apply alpaha
    wm_alpha = alpha_apply(wm_resized, opacity)

    # Apply position
    av, ah = pos_to_anchor(pos_label)
    x, y = compute_xy(av, ah, base.width, base.height, wm_alpha.width, wm_alpha.height, margin)

    base.paste(wm_alpha, (x, y), wm_alpha)
    return base

# --- MAIN UI ---
if main_file and wm_file:
    try:
        main_img = Image.open(main_file)
        wm_img = Image.open(wm_file)

        # –§–æ–Ω/–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        bg_color = "#FFFFFF" if bg_mode == "–ë—è–ª" else "#000000"
        transparent_bg = (bg_mode == "–ü—Ä–æ–∑—Ä–∞—á–µ–Ω (—Å–∞–º–æ PNG)")

        # Resize main image to 500√ó500
        base_500 = resize_to_square(main_img, 500, bg=bg_color, transparent=transparent_bg)

        # Put the watermark on it
        composed = place_watermark(base_500, wm_img, wm_scale_pct, wm_opacity, wm_position_label, wm_margin)

        # –ü—Ä–µ–≥–ª–µ–¥
        st.subheader("–ü—Ä–µ–≥–ª–µ–¥")
        st.image(composed, caption="–ì–æ—Ç–æ–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 500√ó500 —Å watermark", use_column_width=False)

        # Download  
        buf = io.BytesIO()
        save_params = {}
        if out_format == "PNG":
            fmt = "PNG"
            # If it has transparency and user wants transparent bg, keep RGBA
            if composed.mode != "RGBA" and transparent_bg:
                composed = composed.convert("RGBA")
        else:
            fmt = "JPEG"
            # JPEG dosn't support transparency
            if composed.mode != "RGB":
                composed = composed.convert("RGB")
            save_params["quality"] = 95

        composed.save(buf, format=fmt, **save_params)
        buf.seek(0)

        st.download_button(
            label=f"‚¨áÔ∏è –ò–∑—Ç–µ–≥–ª–∏ ({out_format})",
            data=buf,
            file_name=f"image_500x500_watermarked.{out_format.lower()}",
            mime=f"image/{out_format.lower()}",
        )

        # show the initial images
        with st.expander("–í—Ö–æ–¥–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
            c1, c2 = st.columns(2)
            with c1:
                st.image(main_img, caption="–û—Å–Ω–æ–≤–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            with c2:
                st.image(wm_img, caption="Watermark", use_column_width=True)

    except Exception as e:
        st.error(f"–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞: {e}")
else:
    st.info("–ö–∞—á–∏ **–æ—Å–Ω–æ–≤–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ** –∏ **watermark**, –∑–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—à.")
